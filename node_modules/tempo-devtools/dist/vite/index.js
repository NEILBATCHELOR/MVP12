"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tempo = void 0;
const vite_plugin_pages_1 = __importDefault(require("vite-plugin-pages"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const defaultOptions = {
    pagesDir: 'src/tempobook',
    baseRoute: '/tempobook',
    pathToGlobalStyles: 'src/index.css',
};
function tempo(options) {
    const resolvedOptions = Object.assign(Object.assign({}, defaultOptions), options);
    // Create the pages directory if it doesn't exist
    const pagesDir = path_1.default.join(process.cwd(), resolvedOptions.pagesDir);
    if (!fs_1.default.existsSync(pagesDir)) {
        console.log(`Creating pages directory: ${pagesDir}`);
        fs_1.default.mkdirSync(pagesDir, { recursive: true });
    }
    return [
        (0, vite_plugin_pages_1.default)({
            dirs: [
                { dir: resolvedOptions.pagesDir, baseRoute: resolvedOptions.baseRoute },
            ],
            caseSensitive: true,
            importMode: 'sync',
            // Add debug logs to understand route generation
            onRoutesGenerated: (routes) => {
                console.log(`Routes generated at ${new Date().toISOString()}:`, routes.length);
                if (routes.length === 0) {
                    console.warn('WARNING: Empty routes array generated');
                }
            },
        }),
        {
            name: 'tempo-routes',
            resolveId(id) {
                if (id === 'tempo-routes') {
                    return id;
                }
                return null;
            },
            load(id) {
                if (id === 'tempo-routes') {
                    return `
            import routes from '~react-pages';
            export default routes;
          `;
                }
                return null;
            },
        },
        {
            // If a new file was added we need to make sure it
            // gets picked up by tailwind, so invalidate the global css file
            name: 'vite-plugin-tailwind-hmr',
            configureServer(_server) {
                let server = _server;
                // Add debugging for directory creation
                server.watcher.on('addDir', (dirPath) => {
                    if (dirPath.includes(resolvedOptions.pagesDir)) {
                        console.log(`Directory added: ${dirPath}`);
                    }
                });
                server.watcher.on('add', (filePath) => __awaiter(this, void 0, void 0, function* () {
                    console.log(`File added: ${filePath}`);
                    // Only care about files in the pages dir
                    if (!filePath.includes(resolvedOptions.pagesDir)) {
                        return;
                    }
                    const pathToRepo = filePath.split(resolvedOptions.pagesDir)[0];
                    if (filePath.match(/\.(js|jsx|ts|tsx)$/)) {
                        // Attempt to invalidate route modules to force regeneration
                        try {
                            const timestamp = Date.now();
                            const seen = new Set();
                            // Find and invalidate the Pages virtual module
                            const routesModule = Array.from(server.moduleGraph.idToModuleMap.keys()).find((id) => id.includes('~react-pages') ||
                                id.includes('virtual:generated-pages'));
                            if (routesModule) {
                                console.log(`Invalidating routes module: ${routesModule}`);
                                const mod = server.moduleGraph.getModuleById(routesModule);
                                if (mod) {
                                    server.moduleGraph.invalidateModule(mod, seen, timestamp);
                                    // Send HMR update to refresh routes
                                    setTimeout(() => {
                                        console.log('Sending routes HMR update');
                                        server.ws.send({
                                            type: 'update',
                                            updates: [
                                                {
                                                    type: 'js-update',
                                                    path: routesModule,
                                                    acceptedPath: routesModule,
                                                    timestamp,
                                                },
                                            ],
                                        });
                                    }, 100);
                                }
                            }
                            // Original Tailwind HMR logic
                            const globalStylesModule = server.moduleGraph.idToModuleMap.get(pathToRepo + resolvedOptions.pathToGlobalStyles);
                            if (globalStylesModule) {
                                // Jul 18 2024 - sometimes new added file that is added is not yet processed
                                // by the vite server, need to wait until it is
                                // Note that this function is marked experimental but it works when tested on this date
                                console.log(`Waiting for requests idle: ${filePath}`);
                                yield server.waitForRequestsIdle(filePath);
                                console.log(`Invalidating global styles module`);
                                server.moduleGraph.invalidateModule(globalStylesModule, seen, timestamp);
                            }
                        }
                        catch (e) {
                            console.error('Error during module invalidation:', e);
                        }
                    }
                }));
            },
        },
    ];
}
exports.tempo = tempo;
